{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MAXD0\\\\Desktop\\\\ESILV\\\\A4\\\\blockchain programming\\\\my_front\\\\src\\\\components\\\\pages\\\\FakeBaycTokenInfo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IpfsImage } from 'react-ipfs-image';\nimport Web3 from \"web3\";\nimport FakeBaycABI from \"../ABI/FakeBAYC.json\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FakeBaycTokenInfo() {\n  _s();\n  //state zone \n  const [tokenId, setTokenId] = useState();\n  const [attribute, setAttribute] = useState();\n  const [image, setImage] = useState(\"\");\n  const currenttokenId = useParams();\n  useEffect(async () => {\n    setTokenId(currenttokenId.tokenId);\n    GetTokenInfo();\n  }, []);\n\n  //contract zone \n  const contract_abi = FakeBaycABI.abi;\n  const contract_address = \"0x1dA89342716B14602664626CD3482b47D5C2005E\";\n  let web3 = new Web3(window.ethereum);\n  var contract = new web3.eth.Contract(contract_abi, contract_address);\n  const handleChamp = event => {\n    setTokenId(event.target.value);\n  };\n  async function GetTokenInfo() {\n    let info = await contract.methods.tokenURI(tokenId).call();\n    const jsonURI = await fetch(info).then(res => res.json());\n    setAttribute(JSON.stringify(jsonURI.attributes));\n    setImage(jsonURI.image);\n    console.log(jsonURI);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: tokenId,\n      onChange: e => handleChamp(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: GetTokenInfo,\n      children: \" Get token info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this), image && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(IpfsImage, {\n        hash: image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"DATAS :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: attribute\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(FakeBaycTokenInfo, \"x53crD32g3r5iFTPiMliJ2wRHX0=\", false, function () {\n  return [useParams];\n});\n_c = FakeBaycTokenInfo;\nexport default FakeBaycTokenInfo;\nvar _c;\n$RefreshReg$(_c, \"FakeBaycTokenInfo\");","map":{"version":3,"names":["useState","useEffect","IpfsImage","Web3","FakeBaycABI","useParams","FakeBaycTokenInfo","tokenId","setTokenId","attribute","setAttribute","image","setImage","currenttokenId","GetTokenInfo","contract_abi","abi","contract_address","web3","window","ethereum","contract","eth","Contract","handleChamp","event","target","value","info","methods","tokenURI","call","jsonURI","fetch","then","res","json","JSON","stringify","attributes","console","log","e"],"sources":["C:/Users/MAXD0/Desktop/ESILV/A4/blockchain programming/my_front/src/components/pages/FakeBaycTokenInfo.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { IpfsImage } from 'react-ipfs-image';\nimport Web3 from \"web3\";\nimport FakeBaycABI from \"../ABI/FakeBAYC.json\"\nimport { useParams } from 'react-router-dom';\n\nfunction FakeBaycTokenInfo() {\n    \n    //state zone \n    const[tokenId, setTokenId] = useState(); \n    const[attribute, setAttribute]= useState(); \n    const [image, setImage] = useState(\"\"); \n\n    const currenttokenId  = useParams();\n    useEffect(async() => {\n        setTokenId(currenttokenId.tokenId);\n        GetTokenInfo();\n    }, [])\n\n    //contract zone \n    const contract_abi = FakeBaycABI.abi; \n    const contract_address = \"0x1dA89342716B14602664626CD3482b47D5C2005E\"; \n    let web3 = new Web3(window.ethereum);\n    var contract = new web3.eth.Contract(contract_abi, contract_address);\n\n    const handleChamp = (event)=>{\n        setTokenId(event.target.value)\n    }\n\n    async function GetTokenInfo(){\n        let info= await contract.methods.tokenURI(tokenId).call();\n        const jsonURI = await fetch(info).then(res => res.json()); \n\n        setAttribute(JSON.stringify(jsonURI.attributes));  \n        setImage(jsonURI.image); \n        console.log(jsonURI); \n    }\n    \n    \n    return (\n        <div>\n            <input type=\"text\"value={tokenId} onChange={e=>handleChamp(e)}/>\n                <br></br>\n                    <button onClick={GetTokenInfo}> Get token info</button>\n                    <br></br>\n                <br></br>\n            {image &&\n                <>\n                    <IpfsImage hash={image}/>\n                    <h3>DATAS :</h3>\n                    <div>{attribute}</div>\n                    <br></br>\n                    <br></br>\n                </>\n            }\n        </div>                    \n    )\n}\n\nexport default FakeBaycTokenInfo; "],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,SAASC,SAAS,QAAQ,kBAAkB;AAAC;AAAA;AAE7C,SAASC,iBAAiB,GAAG;EAAA;EAEzB;EACA,MAAK,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,EAAE;EACvC,MAAK,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAEV,QAAQ,EAAE;EAC1C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMa,cAAc,GAAIR,SAAS,EAAE;EACnCJ,SAAS,CAAC,YAAW;IACjBO,UAAU,CAACK,cAAc,CAACN,OAAO,CAAC;IAClCO,YAAY,EAAE;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,YAAY,GAAGX,WAAW,CAACY,GAAG;EACpC,MAAMC,gBAAgB,GAAG,4CAA4C;EACrE,IAAIC,IAAI,GAAG,IAAIf,IAAI,CAACgB,MAAM,CAACC,QAAQ,CAAC;EACpC,IAAIC,QAAQ,GAAG,IAAIH,IAAI,CAACI,GAAG,CAACC,QAAQ,CAACR,YAAY,EAAEE,gBAAgB,CAAC;EAEpE,MAAMO,WAAW,GAAIC,KAAK,IAAG;IACzBjB,UAAU,CAACiB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAED,eAAeb,YAAY,GAAE;IACzB,IAAIc,IAAI,GAAE,MAAMP,QAAQ,CAACQ,OAAO,CAACC,QAAQ,CAACvB,OAAO,CAAC,CAACwB,IAAI,EAAE;IACzD,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAACL,IAAI,CAAC,CAACM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC;IAEzD1B,YAAY,CAAC2B,IAAI,CAACC,SAAS,CAACN,OAAO,CAACO,UAAU,CAAC,CAAC;IAChD3B,QAAQ,CAACoB,OAAO,CAACrB,KAAK,CAAC;IACvB6B,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC;EACxB;EAGA,oBACI;IAAA,wBACI;MAAO,IAAI,EAAC,MAAM;MAAA,KAAK,EAAEzB,OAAQ;MAAC,QAAQ,EAAEmC,CAAC,IAAElB,WAAW,CAACkB,CAAC;IAAE;MAAA;MAAA;MAAA;IAAA,QAAE,eAC5D;MAAA;MAAA;MAAA;IAAA,QAAS,eACL;MAAQ,OAAO,EAAE5B,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAyB,eACvD;MAAA;MAAA;MAAA;IAAA,QAAS,eACb;MAAA;MAAA;MAAA;IAAA,QAAS,EACZH,KAAK,iBACF;MAAA,wBACI,QAAC,SAAS;QAAC,IAAI,EAAEA;MAAM;QAAA;QAAA;QAAA;MAAA,QAAE,eACzB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB,eAChB;QAAA,UAAMF;MAAS;QAAA;QAAA;QAAA;MAAA,QAAO,eACtB;QAAA;QAAA;QAAA;MAAA,QAAS,eACT;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA,gBACV;EAAA;IAAA;IAAA;IAAA;EAAA,QAEL;AAEd;AAAC,GAnDQH,iBAAiB;EAAA,QAOED,SAAS;AAAA;AAAA,KAP5BC,iBAAiB;AAqD1B,eAAeA,iBAAiB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}