{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MAXD0\\\\Desktop\\\\ESILV\\\\A4\\\\blockchain programming\\\\my_front\\\\src\\\\components\\\\pages\\\\FakeNefturiansUserInfo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IpfsImage } from 'react-ipfs-image';\nimport Web3 from \"web3\";\nimport FakeNefturianABI from \"../ABI/FakeNefturian.json\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FakeNefturiansUserInfo() {\n  _s();\n  const [balance, setBalance] = useState(0);\n  const [list, setList] = useState([]);\n  const [userwallet, setUserWallet] = useState();\n  const userAddress = useParams();\n  console.log(userAddress.userAddress);\n  useEffect(() => {\n    setUserWallet(userAddress.userAddress);\n  }, []);\n\n  //contract zone \n  const contract_abi = FakeNefturianABI.abi;\n  const contract_address = \"0x9bAADf70BD9369F54901CF3Ee1b3c63b60F4F0ED\";\n  let web3 = new Web3(window.ethereum);\n  var contract = new web3.eth.Contract(contract_abi, contract_address);\n\n  // retrive user balance\n\n  async function getBalance() {\n    // get the balance of the user \n    let balance = await contract.methods.balanceOf(userwallet).call();\n    setBalance(balance);\n    let listing = [];\n    for (let i = 0; i < balance; i++) {\n      let tempTokenId = await contract.methods.tokenOfOwnerByIndex(userwallet, i).call();\n      let URI = await contract.methods.tokenURI(tempTokenId).call();\n      let fetchUri = await fetch(URI).then(res => res.json());\n\n      // check that the nft is not in the list \n      if (listing.includes(JSON.stringify(fetchUri)) === false) {\n        listing.push(JSON.stringify(fetchUri));\n      }\n    }\n    setList(listing);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: userwallet && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Wallet address : \", userAddress.userAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(FakeNefturiansUserInfo, \"rlcx2zi1anRRXTBjY8cVe1XHduM=\", false, function () {\n  return [useParams];\n});\n_c = FakeNefturiansUserInfo;\nexport default FakeNefturiansUserInfo;\nvar _c;\n$RefreshReg$(_c, \"FakeNefturiansUserInfo\");","map":{"version":3,"names":["useState","useEffect","IpfsImage","Web3","FakeNefturianABI","useParams","FakeNefturiansUserInfo","balance","setBalance","list","setList","userwallet","setUserWallet","userAddress","console","log","contract_abi","abi","contract_address","web3","window","ethereum","contract","eth","Contract","getBalance","methods","balanceOf","call","listing","i","tempTokenId","tokenOfOwnerByIndex","URI","tokenURI","fetchUri","fetch","then","res","json","includes","JSON","stringify","push"],"sources":["C:/Users/MAXD0/Desktop/ESILV/A4/blockchain programming/my_front/src/components/pages/FakeNefturiansUserInfo.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { IpfsImage } from 'react-ipfs-image';\nimport Web3 from \"web3\";\nimport FakeNefturianABI from \"../ABI/FakeNefturian.json\"\nimport { useParams } from 'react-router-dom';\n\nfunction FakeNefturiansUserInfo(){\n    const[balance, setBalance] = useState(0);\n    const [list, setList] = useState([]);\n    const [userwallet, setUserWallet] = useState();\n\n    const userAddress=useParams();\n    console.log(userAddress.userAddress);\n\n    useEffect(() => {\n        setUserWallet(userAddress.userAddress);\n    }, []);\n\n    //contract zone \n    const contract_abi = FakeNefturianABI.abi; \n    const contract_address = \"0x9bAADf70BD9369F54901CF3Ee1b3c63b60F4F0ED\"; \n    let web3 = new Web3(window.ethereum);\n    var contract = new web3.eth.Contract(contract_abi, contract_address);\n\n    // retrive user balance\n\n    async function getBalance() {\n        // get the balance of the user \n        let balance = await contract.methods.balanceOf(userwallet).call(); \n        setBalance(balance); \n        let listing = [];\n        \n        for( let i = 0; i < balance; i++){\n          \n            let tempTokenId = await contract.methods.tokenOfOwnerByIndex(userwallet,i).call(); \n            let URI = await contract.methods.tokenURI(tempTokenId).call();\n          \n            let fetchUri = await fetch(URI).then(res => res.json());  \n\n            // check that the nft is not in the list \n            if (listing.includes(JSON.stringify(fetchUri))===false){\n                \n                listing.push(JSON.stringify(fetchUri));\n            }\n        }\n       setList(listing);\n    }\n\n    \n    \n    return (\n        <div>{userwallet && <>\n            <h1>Wallet address : {userAddress.userAddress}</h1>        \n        </>\n        }\n        </div>                    \n    )\n    \n}\n\nexport default FakeNefturiansUserInfo;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,SAASC,SAAS,QAAQ,kBAAkB;AAAC;AAAA;AAE7C,SAASC,sBAAsB,GAAE;EAAA;EAC7B,MAAK,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,EAAE;EAE9C,MAAMa,WAAW,GAACR,SAAS,EAAE;EAC7BS,OAAO,CAACC,GAAG,CAACF,WAAW,CAACA,WAAW,CAAC;EAEpCZ,SAAS,CAAC,MAAM;IACZW,aAAa,CAACC,WAAW,CAACA,WAAW,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,YAAY,GAAGZ,gBAAgB,CAACa,GAAG;EACzC,MAAMC,gBAAgB,GAAG,4CAA4C;EACrE,IAAIC,IAAI,GAAG,IAAIhB,IAAI,CAACiB,MAAM,CAACC,QAAQ,CAAC;EACpC,IAAIC,QAAQ,GAAG,IAAIH,IAAI,CAACI,GAAG,CAACC,QAAQ,CAACR,YAAY,EAAEE,gBAAgB,CAAC;;EAEpE;;EAEA,eAAeO,UAAU,GAAG;IACxB;IACA,IAAIlB,OAAO,GAAG,MAAMe,QAAQ,CAACI,OAAO,CAACC,SAAS,CAAChB,UAAU,CAAC,CAACiB,IAAI,EAAE;IACjEpB,UAAU,CAACD,OAAO,CAAC;IACnB,IAAIsB,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,OAAO,EAAEuB,CAAC,EAAE,EAAC;MAE7B,IAAIC,WAAW,GAAG,MAAMT,QAAQ,CAACI,OAAO,CAACM,mBAAmB,CAACrB,UAAU,EAACmB,CAAC,CAAC,CAACF,IAAI,EAAE;MACjF,IAAIK,GAAG,GAAG,MAAMX,QAAQ,CAACI,OAAO,CAACQ,QAAQ,CAACH,WAAW,CAAC,CAACH,IAAI,EAAE;MAE7D,IAAIO,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC;;MAEvD;MACA,IAAIV,OAAO,CAACW,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAAC,KAAG,KAAK,EAAC;QAEnDN,OAAO,CAACc,IAAI,CAACF,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAAC;MAC1C;IACJ;IACDzB,OAAO,CAACmB,OAAO,CAAC;EACnB;EAIA,oBACI;IAAA,UAAMlB,UAAU,iBAAI;MAAA,uBAChB;QAAA,gCAAsBE,WAAW,CAACA,WAAW;MAAA;QAAA;QAAA;QAAA;MAAA;IAAM;EACpD;IAAA;IAAA;IAAA;EAAA,QAEG;AAGd;AAAC,GApDQP,sBAAsB;EAAA,QAKTD,SAAS;AAAA;AAAA,KALtBC,sBAAsB;AAsD/B,eAAeA,sBAAsB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}