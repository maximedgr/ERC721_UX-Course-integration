{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MAXD0\\\\Desktop\\\\ESILV\\\\A4\\\\blockchain programming\\\\my_front\\\\src\\\\components\\\\pages\\\\FakeBaycTokenInfo.js\",\n  _s = $RefreshSig$();\nimport FakeBaycABI from \"../ABI/FakeBAYC.json\";\nimport { useState, useEffect } from 'react';\nimport Web3 from \"web3\";\nimport { matchPath } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FakeBaycTokenInfo() {\n  _s();\n  //State definition  \n  const [account, setAccount] = useState(null);\n  const [chain, setChain] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  console.log(match.params.tokenId);\n  useEffect(() => {\n    activate();\n    checkNetwork();\n  }, []);\n\n  // invoke to connect to wallet account\n  async function activate() {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        checkAccount();\n      } catch (err) {\n        console.log('user did not add account...', err);\n      }\n    }\n  }\n\n  // invoke to check if account is already connected\n  async function checkAccount() {\n    let web3 = new Web3(window.ethereum);\n    setWeb3(web3);\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n  }\n  async function checkNetwork() {\n    let web3 = new Web3(window.ethereum);\n    const chainID = await web3.eth.getChainId();\n    if (chainID != \"11155111\") {\n      await switchNetwork();\n    } else {\n      await setChain(chainID);\n    }\n  }\n  async function switchNetwork() {\n    let web3 = new Web3(window.ethereum);\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: '0x5'\n      }] // Sepolia n'est pas natif pour la fonction de metamask\n    });\n\n    const chainID = await web3.eth.getChainId();\n    setChain(chainID);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"FakeBayc Token Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(FakeBaycTokenInfo, \"Mqne26q16jJkK3UOIYOAZB1IHU4=\");\n_c = FakeBaycTokenInfo;\nexport default FakeBaycTokenInfo;\nvar _c;\n$RefreshReg$(_c, \"FakeBaycTokenInfo\");","map":{"version":3,"names":["FakeBaycABI","useState","useEffect","Web3","matchPath","FakeBaycTokenInfo","account","setAccount","chain","setChain","web3","setWeb3","console","log","match","params","tokenId","activate","checkNetwork","window","ethereum","request","method","checkAccount","err","accounts","eth","getAccounts","chainID","getChainId","switchNetwork","chainId"],"sources":["C:/Users/MAXD0/Desktop/ESILV/A4/blockchain programming/my_front/src/components/pages/FakeBaycTokenInfo.js"],"sourcesContent":["import FakeBaycABI from \"../ABI/FakeBAYC.json\"\nimport { useState, useEffect } from 'react'\nimport Web3 from \"web3\";\nimport { matchPath } from \"react-router-dom\";\n\nfunction FakeBaycTokenInfo() {\n\n//State definition  \nconst [account, setAccount] = useState(null);\nconst [chain, setChain] = useState(null); \nconst [web3, setWeb3] = useState(null);\n\nconsole.log(match.params.tokenId);\n\n\nuseEffect(() => {\n    activate();\n    checkNetwork();\n}, [])\n\n// invoke to connect to wallet account\nasync function activate() {\n  if (window.ethereum) {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      checkAccount()\n    } catch (err) {\n      console.log('user did not add account...', err)\n    }\n  }\n}\n\n// invoke to check if account is already connected\nasync function checkAccount() {\n  let web3 = new Web3(window.ethereum)\n  setWeb3(web3)\n  const accounts = await web3.eth.getAccounts()\n  setAccount(accounts[0])\n}\n\nasync function checkNetwork(){\n  let web3 = new Web3(window.ethereum)\n  const chainID = await web3.eth.getChainId()\n  if(chainID!=\"11155111\"){\n    await switchNetwork();\n  }\n  else{\n    await setChain(chainID)\n  }\n}\n\nasync function switchNetwork() {\n  let web3 = new Web3(window.ethereum)\n  await window.ethereum.request({\n  method: 'wallet_switchEthereumChain',\n  params: [{ chainId: '0x5' }],    // Sepolia n'est pas natif pour la fonction de metamask\n  });\n  const chainID = await web3.eth.getChainId()\n  setChain(chainID)\n}\n\n\n\n    return (\n        <div>\n            <h1>FakeBayc Token Info</h1>\n        </div>                    \n    )\n}\n\nexport default FakeBaycTokenInfo; "],"mappings":";;AAAA,OAAOA,WAAW,MAAM,sBAAsB;AAC9C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,SAAS,QAAQ,kBAAkB;AAAC;AAE7C,SAASC,iBAAiB,GAAG;EAAA;EAE7B;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtCW,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC;EAGjCd,SAAS,CAAC,MAAM;IACZe,QAAQ,EAAE;IACVC,YAAY,EAAE;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,eAAeD,QAAQ,GAAG;IACxB,IAAIE,MAAM,CAACC,QAAQ,EAAE;MACnB,IAAI;QACF,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QAChEC,YAAY,EAAE;MAChB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZZ,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEW,GAAG,CAAC;MACjD;IACF;EACF;;EAEA;EACA,eAAeD,YAAY,GAAG;IAC5B,IAAIb,IAAI,GAAG,IAAIP,IAAI,CAACgB,MAAM,CAACC,QAAQ,CAAC;IACpCT,OAAO,CAACD,IAAI,CAAC;IACb,MAAMe,QAAQ,GAAG,MAAMf,IAAI,CAACgB,GAAG,CAACC,WAAW,EAAE;IAC7CpB,UAAU,CAACkB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACzB;EAEA,eAAeP,YAAY,GAAE;IAC3B,IAAIR,IAAI,GAAG,IAAIP,IAAI,CAACgB,MAAM,CAACC,QAAQ,CAAC;IACpC,MAAMQ,OAAO,GAAG,MAAMlB,IAAI,CAACgB,GAAG,CAACG,UAAU,EAAE;IAC3C,IAAGD,OAAO,IAAE,UAAU,EAAC;MACrB,MAAME,aAAa,EAAE;IACvB,CAAC,MACG;MACF,MAAMrB,QAAQ,CAACmB,OAAO,CAAC;IACzB;EACF;EAEA,eAAeE,aAAa,GAAG;IAC7B,IAAIpB,IAAI,GAAG,IAAIP,IAAI,CAACgB,MAAM,CAACC,QAAQ,CAAC;IACpC,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;MAC9BC,MAAM,EAAE,4BAA4B;MACpCP,MAAM,EAAE,CAAC;QAAEgB,OAAO,EAAE;MAAM,CAAC,CAAC,CAAK;IACjC,CAAC,CAAC;;IACF,MAAMH,OAAO,GAAG,MAAMlB,IAAI,CAACgB,GAAG,CAACG,UAAU,EAAE;IAC3CpB,QAAQ,CAACmB,OAAO,CAAC;EACnB;EAII,oBACI;IAAA,uBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAA4B;IAAA;IAAA;IAAA;EAAA,QAC1B;AAEd;AAAC,GA/DQvB,iBAAiB;AAAA,KAAjBA,iBAAiB;AAiE1B,eAAeA,iBAAiB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}