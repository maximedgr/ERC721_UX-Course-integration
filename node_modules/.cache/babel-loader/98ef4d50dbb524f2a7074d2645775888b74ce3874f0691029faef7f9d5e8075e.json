{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MAXD0\\\\Desktop\\\\ESILV\\\\A4\\\\blockchain programming\\\\my_front\\\\src\\\\components\\\\pages\\\\FakeMeebits.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IpfsImage } from 'react-ipfs-image';\nimport Web3 from \"web3\";\nimport FakeMeebitsABI from \"../ABI/FakeMeebits.json\";\nimport FakeMeebitsClaimerABI from \"../ABI/FakeMeebitsClaimer.json\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FakeMeebits() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [chain, setChain] = useState(null);\n\n  //contract zone \n  let web3 = new Web3(window.ethereum);\n  //FakeMeebits\n  const contract_abi = FakeMeebitsABI.abi;\n  const contract_address = \"0xD1d148Be044AEB4948B48A03BeA2874871a26003\";\n  var contract = new web3.eth.Contract(contract_abi, contract_address);\n  //FakeMeebitsClaimer\n  const contract_claimer_abi = FakeMeebitsClaimerABI.abi;\n  const contract_claimer_address = \"0x5341e225Ab4D29B838a813E380c28b0eFD6FBa55\";\n  var contract_claimer = new web3.eth.Contract(contract_claimer_abi, contract_claimer_address);\n\n  //usefull function\n  useEffect(() => {\n    activate();\n    checkNetwork();\n  }, []);\n\n  // invoke to connect to wallet account\n  async function activate() {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        checkAccount();\n      } catch (err) {\n        console.log('user did not add account...', err);\n      }\n    }\n  }\n\n  // invoke to check if account is already connected\n  async function checkAccount() {\n    let web3 = new Web3(window.ethereum);\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n  }\n  async function checkNetwork() {\n    let web3 = new Web3(window.ethereum);\n    const chainID = await web3.eth.getChainId();\n    if (chainID != \"11155111\") {\n      await switchNetwork();\n    } else {\n      await setChain(chainID);\n    }\n  }\n  async function switchNetwork() {\n    let web3 = new Web3(window.ethereum);\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: '0x5'\n      }] // Sepolia n'est pas natif pour la fonction de metamask\n    });\n\n    const chainID = await web3.eth.getChainId();\n    setChain(chainID);\n  }\n  async function Mint() {}\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Fake Meebits\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: Mint,\n      children: \"Mint Meebits\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(FakeMeebits, \"ySn48sbEtt0Tw/UEEvvO1mDdRBI=\");\n_c = FakeMeebits;\nexport default FakeMeebits;\nvar _c;\n$RefreshReg$(_c, \"FakeMeebits\");","map":{"version":3,"names":["useState","useEffect","IpfsImage","Web3","FakeMeebitsABI","FakeMeebitsClaimerABI","useParams","FakeMeebits","account","setAccount","chain","setChain","web3","window","ethereum","contract_abi","abi","contract_address","contract","eth","Contract","contract_claimer_abi","contract_claimer_address","contract_claimer","activate","checkNetwork","request","method","checkAccount","err","console","log","accounts","getAccounts","chainID","getChainId","switchNetwork","params","chainId","Mint"],"sources":["C:/Users/MAXD0/Desktop/ESILV/A4/blockchain programming/my_front/src/components/pages/FakeMeebits.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { IpfsImage } from 'react-ipfs-image';\nimport Web3 from \"web3\";\nimport FakeMeebitsABI from \"../ABI/FakeMeebits.json\"\nimport FakeMeebitsClaimerABI from \"../ABI/FakeMeebitsClaimer.json\"\nimport { useParams } from 'react-router-dom';\n\nfunction FakeMeebits(){\n\n    const [account, setAccount] = useState(null);\n    const [chain, setChain] = useState(null); \n\n     //contract zone \n     let web3 = new Web3(window.ethereum);\n     //FakeMeebits\n     const contract_abi = FakeMeebitsABI.abi; \n     const contract_address = \"0xD1d148Be044AEB4948B48A03BeA2874871a26003\"; \n     var contract = new web3.eth.Contract(contract_abi, contract_address);\n     //FakeMeebitsClaimer\n     const contract_claimer_abi = FakeMeebitsClaimerABI.abi; \n     const contract_claimer_address = \"0x5341e225Ab4D29B838a813E380c28b0eFD6FBa55\"; \n     var contract_claimer = new web3.eth.Contract(contract_claimer_abi, contract_claimer_address);\n\n     //usefull function\n     useEffect(() => {\n        activate();\n        checkNetwork();\n    }, [])\n    \n    // invoke to connect to wallet account\n    async function activate() {\n      if (window.ethereum) {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n          checkAccount()\n        } catch (err) {\n          console.log('user did not add account...', err)\n        }\n      }\n    }\n    \n    // invoke to check if account is already connected\n    async function checkAccount() {\n      let web3 = new Web3(window.ethereum)\n      const accounts = await web3.eth.getAccounts()\n      setAccount(accounts[0])\n    }\n    \n    async function checkNetwork(){\n      let web3 = new Web3(window.ethereum)\n      const chainID = await web3.eth.getChainId()\n      if(chainID!=\"11155111\"){\n        await switchNetwork();\n      }\n      else{\n        await setChain(chainID)\n      }\n    }\n    \n    \n    async function switchNetwork() {\n      let web3 = new Web3(window.ethereum)\n      await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: '0x5' }],    // Sepolia n'est pas natif pour la fonction de metamask\n      });\n      const chainID = await web3.eth.getChainId()\n      setChain(chainID)\n    }\n\n\n     async function Mint(){\n     }\n \n\n    return (\n        <div>\n        <h2>Fake Meebits</h2>\n        <button onClick={Mint}>Mint Meebits</button>\n        </div>                    \n    )\n    \n}\n\nexport default FakeMeebits;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}