{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MAXD0\\\\Desktop\\\\ESILV\\\\A4\\\\blockchain programming\\\\my_front\\\\src\\\\components\\\\pages\\\\FakeBaycTokenInfo.js\",\n  _s = $RefreshSig$();\nimport FakeBaycABI from \"../ABI/FakeBAYC.json\";\nimport { useState, useEffect } from 'react';\nimport Web3 from \"web3\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FakeBaycTokenInfo() {\n  _s();\n  //state zone \n  const [tokenId, setTokenId] = useState(0);\n  const [account, setAccount] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const [attribute, setAttribute] = useState();\n  const [image, setImage] = useState(\"\");\n  const [chain, setChain] = useState(null);\n\n  //retrieve tokenID from url\n  const currenttokenId = useParams();\n  console.log(currenttokenId);\n  useEffect(() => {\n    checkNetwork();\n    checkAccount();\n  }, []);\n  async function checkNetwork() {\n    let web3 = new Web3(window.ethereum);\n    const chainID = await web3.eth.getChainId();\n    await setChain(chainID);\n  }\n  async function checkAccount() {\n    let web3 = new Web3(window.ethereum);\n    setWeb3(web3);\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n  }\n  async function getFakeBAYCdata() {\n    setTokenId(currenttokenId);\n    console.log(tokenId);\n    const fakeBaycData = FakeBaycABI.networks[chain];\n    if (fakeBaycData) {\n      const contrat = new web3.eth.Contract(FakeBaycABI.abi, fakeBaycData.address);\n      let info = await contrat.methods.tokenURI(tokenId).call();\n      const jsonURI = await fetch(info).then(res => res.json());\n      setAttribute(JSON.stringify(jsonURI.attributes));\n      setImage(jsonURI.image);\n      console.log(jsonURI);\n    } else {\n      window.alert('Error : FakeBAYC contract not deployed / no detected network');\n    }\n    loading = true;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getFakeBAYCdata,\n      children: \"Click here to get specific FakeBAYC infos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: black\n        },\n        children: [\"Token ID : \", tokenId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(FakeBaycTokenInfo, \"bhLQ6YPd7nwj/IG0Qtg/bY6KvMg=\", false, function () {\n  return [useParams];\n});\n_c = FakeBaycTokenInfo;\nexport default FakeBaycTokenInfo;\nvar _c;\n$RefreshReg$(_c, \"FakeBaycTokenInfo\");","map":{"version":3,"names":["FakeBaycABI","useState","useEffect","Web3","useParams","FakeBaycTokenInfo","tokenId","setTokenId","account","setAccount","web3","setWeb3","attribute","setAttribute","image","setImage","chain","setChain","currenttokenId","console","log","checkNetwork","checkAccount","window","ethereum","chainID","eth","getChainId","accounts","getAccounts","getFakeBAYCdata","fakeBaycData","networks","contrat","Contract","abi","address","info","methods","tokenURI","call","jsonURI","fetch","then","res","json","JSON","stringify","attributes","alert","loading","color","black"],"sources":["C:/Users/MAXD0/Desktop/ESILV/A4/blockchain programming/my_front/src/components/pages/FakeBaycTokenInfo.js"],"sourcesContent":["import FakeBaycABI from \"../ABI/FakeBAYC.json\"\nimport { useState, useEffect } from 'react'\nimport Web3 from \"web3\";\nimport { useParams } from 'react-router-dom';\n\n\n\nfunction FakeBaycTokenInfo() {\n\n    //state zone \n    const[tokenId, setTokenId] = useState(0);\n    const [account, setAccount] = useState(null); \n    const [web3, setWeb3] = useState(null);\n    const[attribute, setAttribute]= useState(); \n    const [image, setImage] = useState(\"\");\n    const [chain, setChain] = useState(null);\n\n    //retrieve tokenID from url\n    const currenttokenId  = useParams();\n    console.log(currenttokenId);\n    useEffect(() => {\n        checkNetwork();\n        checkAccount();\n        \n    }, [])\n\n    async function checkNetwork(){\n        let web3 = new Web3(window.ethereum)\n        const chainID = await web3.eth.getChainId()\n        await setChain(chainID);\n    }\n    async function checkAccount() {\n        let web3 = new Web3(window.ethereum)\n        setWeb3(web3)\n        const accounts = await web3.eth.getAccounts()\n        setAccount(accounts[0])\n      }\n\n\n    async function getFakeBAYCdata(){\n        setTokenId(currenttokenId);\n        console.log(tokenId);\n        const fakeBaycData = FakeBaycABI.networks[chain]\n    \n        if(fakeBaycData){\n            const contrat = new web3.eth.Contract(FakeBaycABI.abi, fakeBaycData.address)\n            let info = await contrat.methods.tokenURI(tokenId).call();\n            const jsonURI = await fetch(info).then(res => res.json()); \n            setAttribute(JSON.stringify(jsonURI.attributes));  \n            setImage(jsonURI.image); \n            console.log(jsonURI);\n\n        } else{\n            window.alert('Error : FakeBAYC contract not deployed / no detected network')\n        }\n        loading =true;\n    }\n\n\n\n    return (\n        <div>\n            <button onClick={getFakeBAYCdata}>Click here to get specific FakeBAYC infos</button>\n            {loading && <>\n                <p style={{color:black}}>Token ID : {tokenId}</p>\n            </>\n            }            \n        </div>           \n    )\n}\n\nexport default FakeBaycTokenInfo; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}